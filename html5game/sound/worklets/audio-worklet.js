AudioWorkletProcessor.prototype._D=function(){this._E=true;this.port.onmessage=(_F)=>{if(_F.data==="kill")this._E=false;};};class _G extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1}];}constructor(){super();this._D();}process(_H,_I,parameters){const _J=_H[0];for(let c=0;c<_J.length;++c){const _K=_J[c];for(let _L=0;_L<_K.length;++_L)_I[parameters.bypass[_L]??parameters.bypass[0]][c][_L]=_K[_L];}return this._E;
}}class _M extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"gain",automationRate:"a-rate",defaultValue:1,minValue:0}];}constructor(){super();this._D();}process(_H,_I,parameters){const _N=_H[0];const _O=_H[1];const _P=_I[0];const gain=parameters.gain;for(let c=0;c<_O.length;++c){const _K=_O[c];const _Q=_P[c];for(let _L=0;_L<_K.length;++_L)_Q[_L]=_K[_L];}for(let c=0;c<_N.length;++c){const _K=_N[c];const _Q=_P[c];for(let _L=0;_L<_K.length;++_L)_Q[_L]+=_K[_L]*(gain[_L]??gain[0]);}return this._E;
}}registerProcessor("audio-bus-input",_G);registerProcessor("audio-bus-output",_M);class _R extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"gain",automationRate:"a-rate",defaultValue:1.0,minValue:0.0},{name:"factor",automationRate:"a-rate",defaultValue:20,minValue:1,maxValue:100},{name:"resolution",automationRate:"a-rate",defaultValue:8,minValue:2,maxValue:16},{name:"mix",automationRate:"a-rate",
defaultValue:0.8,minValue:0.0,maxValue:1.0}];}static _S=[undefined,undefined,2,4,8,16,32,64,128,256,512,1024,2048,4096,8192,16384,32768];constructor(_T){super();this._D();const _U=_T.outputChannelCount[0];this._V=new Float32Array(_U);this._W=new Uint32Array(_U);}process(_H,_I,parameters){const _J=_H[0];const _P=_I[0];const bypass=parameters.bypass;const gain=parameters.gain;const factor=parameters.factor;const resolution=parameters.resolution;const mix=parameters.mix;for(let c=0;c<_J.length;++c){const _K=_J[c];
const _Q=_P[c];for(let _L=0;_L<_K.length;++_L){_Q[_L]=_K[_L];if(this._W[c]===0)this._V[c]=_K[_L];++this._W[c];this._W[c]%=(factor[_L]??factor[0]);if(bypass[_L]??bypass[0])continue;let _X=this._V[c];const _Y=(gain[_L]??gain[0]);_X*=_Y;_X=Math.max(Math.min(_X,1.0),-1.0);const _Z=resolution[_L]??resolution[0];const max=(_X>0.0)?_R._S[_Z]-1:_R._S[_Z];_X=Math.round(_X*max)/max;const __=(mix[_L]??mix[0]);_Q[_L]*=(1.0-__);_Q[_L]+=(_X*__);}}return this._E;}}registerProcessor("bitcrusher-processor",_R);class _01 extends AudioWorkletProcessor{
static _11=5.0;static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"time",automationRate:"a-rate",defaultValue:0.2,minValue:0.0,maxValue:_01._11},{name:"feedback",automationRate:"a-rate",defaultValue:0.5,minValue:0.0,maxValue:1.0},{name:"mix",automationRate:"a-rate",defaultValue:0.35,minValue:0.0,maxValue:1.0}];}constructor(_T){super();this._D();const _U=_T.outputChannelCount[0];const _21=(_01._11*sampleRate)+1;this.buffer=new Array(_U);
this._31=new Uint32Array(_U);for(let c=0;c<_U;++c)this.buffer[c]=new Float32Array(_21);}process(_H,_I,parameters){const _J=_H[0];const _P=_I[0];const bypass=parameters.bypass;const time=parameters.time;const feedback=parameters.feedback;const mix=parameters.mix;for(let c=0;c<_J.length;++c){const _K=_J[c];const _Q=_P[c];for(let _L=0;_L<_K.length;++_L){_Q[_L]=_K[_L];const _41=this._51(c,(time[_L]??time[0]));const _61=_K[_L]+(_41*(feedback[_L]??feedback[0]));this.write(c,_61);if((bypass[_L]??bypass[0]))continue;const __=(mix[_L]??mix[0]);
_Q[_L]*=(1-__);_Q[_L]+=(_41*__);}}return this._E;}_51(_71,_81){const _91=_81*sampleRate;let _a1=(this._31[_71]-~~_91);let _b1=(_a1-1);while(_a1<0)_a1+=this.buffer[_71].length;while(_b1<0)_b1+=this.buffer[_71].length;const frac=_91-~~_91;const _c1=this.buffer[_71][_a1];const _d1=this.buffer[_71][_b1];return _c1+(_d1-_c1)*frac;}write(_71,_e1){++this._31[_71];this._31[_71]%=this.buffer[_71].length;this.buffer[_71][this._31[_71]]=_e1;}}registerProcessor("delay-processor",_01);class _f1 extends AudioWorkletProcessor{
static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"gain",automationRate:"a-rate",defaultValue:0.5,minValue:0.0}];}constructor(){super();this._D();}process(_H,_I,parameters){const _J=_H[0];const _P=_I[0];const bypass=parameters.bypass;const gain=parameters.gain;for(let c=0;c<_J.length;++c){const _K=_J[c];const _Q=_P[c];for(let _L=0;_L<_K.length;++_L){_Q[_L]=_K[_L];if(bypass[_L]??bypass[0])continue;_Q[_L]*=(gain[_L]??gain[0]);}}return this._E;
}}registerProcessor("gain-processor",_f1);class _g1 extends AudioWorkletProcessor{static get parameterDescriptors(){const _h1=Math.min(sampleRate/2.0,20000.0);return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"cutoff",automationRate:"a-rate",defaultValue:Math.min(1500.0,_h1),minValue:10.0,maxValue:_h1},{name:"q",automationRate:"a-rate",defaultValue:1.5,minValue:1.0,maxValue:100.0}];}constructor(_T){super();this._D();const _U=_T.outputChannelCount[0];this._i1=0;this._j1=0;
this._k1=0;this._l1=0;this._m1=0;this._n1=new Float32Array(_U);this._o1=new Float32Array(_U);this._p1=new Float32Array(_U);this._q1=new Float32Array(_U);this._r1=-1;this._s1=-1;}process(_H,_I,parameters){const _J=_H[0];const _P=_I[0];const bypass=parameters.bypass;const cutoff=parameters.cutoff;const q=parameters.q;const _t1=(cutoff.length===1&&q.length===1);if(_t1)this._u1(cutoff[0],q[0]);for(let c=0;c<_J.length;++c){const _K=_J[c];const _Q=_P[c];for(let _L=0;_L<_K.length;++_L){if(!_t1)this._u1(cutoff[_L]??cutoff[0],
q[_L]??q[0]);const _v1=this._k1*_K[_L]+this._l1*this._n1[c]+this._m1*this._o1[c]-this._i1*this._p1[c]-this._j1*this._q1[c];this._o1[c]=this._n1[c];this._n1[c]=_K[_L];this._q1[c]=this._p1[c];this._p1[c]=_v1;_Q[_L]=(bypass[_L]??bypass[0])?_K[_L]:_v1;}}return this._E;}_u1(_w1,_x1){if(_w1===this._r1&&_x1===this._s1)return;const _y1=2*Math.PI*_w1/sampleRate;const alpha=Math.sin(_y1)/(2*_x1);const _z1=Math.cos(_y1);const _A1=1+alpha;const _i1=-2*_z1;const _j1=1-alpha;const _k1=(1+_z1)/2;const _l1=-1-_z1;const _m1=(1+_z1)/2;
this._i1=_i1/_A1;this._j1=_j1/_A1;this._k1=_k1/_A1;this._l1=_l1/_A1;this._m1=_m1/_A1;this._r1=_w1;this._s1=_x1;}}registerProcessor("hpf2-processor",_g1);class _B1 extends AudioWorkletProcessor{static get parameterDescriptors(){const _h1=Math.min(sampleRate/2.0,20000.0);return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"cutoff",automationRate:"a-rate",defaultValue:Math.min(500.0,_h1),minValue:10.0,maxValue:_h1},{name:"q",automationRate:"a-rate",defaultValue:1.5,minValue:1.0,
maxValue:100.0}];}constructor(_T){super();this._D();const _U=_T.outputChannelCount[0];this._i1=0;this._j1=0;this._k1=0;this._l1=0;this._m1=0;this._n1=new Float32Array(_U);this._o1=new Float32Array(_U);this._p1=new Float32Array(_U);this._q1=new Float32Array(_U);this._r1=-1;this._s1=-1;}process(_H,_I,parameters){const _J=_H[0];const _P=_I[0];const bypass=parameters.bypass;const cutoff=parameters.cutoff;const q=parameters.q;const _t1=(cutoff.length===1&&q.length===1);if(_t1)this._u1(cutoff[0],q[0]);for(let c=0;
c<_J.length;++c){const _K=_J[c];const _Q=_P[c];for(let _L=0;_L<_K.length;++_L){if(!_t1)this._u1(cutoff[_L]??cutoff[0],q[_L]??q[0]);const _v1=this._k1*_K[_L]+this._l1*this._n1[c]+this._m1*this._o1[c]-this._i1*this._p1[c]-this._j1*this._q1[c];this._o1[c]=this._n1[c];this._n1[c]=_K[_L];this._q1[c]=this._p1[c];this._p1[c]=_v1;_Q[_L]=(bypass[_L]??bypass[0])?_K[_L]:_v1;}}return this._E;}_u1(_w1,_x1){if(_w1===this._r1&&_x1===this._s1)return;const _y1=2*Math.PI*_w1/sampleRate;const alpha=Math.sin(_y1)/(2*_x1);
const _z1=Math.cos(_y1);const _A1=1+alpha;const _i1=-2*_z1;const _j1=1-alpha;const _k1=(1-_z1)/2;const _l1=1-_z1;const _m1=(1-_z1)/2;this._i1=_i1/_A1;this._j1=_j1/_A1;this._k1=_k1/_A1;this._l1=_l1/_A1;this._m1=_m1/_A1;this._r1=_w1;this._s1=_x1;}}registerProcessor("lpf2-processor",_B1);class _C1{constructor(_D1){this._E1=0;this._F1=0;this.feedback=0;this._G1=0;this.buffer=new Float32Array(_D1);this._H1=0;}process(_e1){const out=this.buffer[this._H1];this._G1=(this._G1*this._E1)+(out*this._F1);this.buffer[this._H1]=_e1+(this._G1*this.feedback);
++this._H1;this._H1%=this.buffer.length;return out;}_I1(_J1){this.feedback=Math.min(Math.max(0,_J1),1);}_K1(_L1){this._E1=Math.min(Math.max(0,_L1),1);this._F1=1-this._E1;}}class _M1{constructor(_D1){this.feedback=0;this.buffer=new Float32Array(_D1);this._H1=0;}process(_e1){const out=this.buffer[this._H1];this.buffer[this._H1]=_e1+(out*this.feedback);++this._H1;this._H1%=this.buffer.length;return(out-_e1);}_I1(_J1){this.feedback=Math.min(Math.max(0,_J1),1);}}class _N1 extends AudioWorkletProcessor{static _O1=8;
static _P1=4;static _Q1=0.015;static _R1=0.4;static _S1=0.28;static _T1=0.7;static _U1=[1116,1188,1277,1356,1422,1491,1557,1617];static _V1=[1139,1211,1300,1379,1445,1514,1580,1640];static _W1=[556,441,341,225];static _X1=[579,464,364,248];static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"size",automationRate:"a-rate",defaultValue:0.7,minValue:0.0,maxValue:1.0},{name:"damp",automationRate:"a-rate",defaultValue:0.1,minValue:0.0,maxValue:1.0}
,{name:"mix",automationRate:"a-rate",defaultValue:0.35,minValue:0.0,maxValue:1.0}];}constructor(_T){super();this._D();const _U=_T.outputChannelCount[0];this._Y1=-1;this._Z1=-1;this.__1=new Array(_U);this._02=new Array(_U);const _12=[_N1._U1,_N1._V1];const _22=[_N1._W1,_N1._X1];for(let c=0;c<_U;++c){this.__1[c]=new Array(_N1._O1);this._02[c]=new Array(_N1._P1);for(let i=0;i<_N1._O1;++i)this.__1[c][i]=new _C1(_12[c%_12.length][i]);for(let i=0;i<_N1._P1;++i)this._02[c][i]=new _M1(_22[c%_22.length][i]);}this._32(0.5);
this._K1(0.5);for(let c=0;c<_U;++c)for(let i=0;i<_N1._P1;++i)this._02[c][i]._I1(0.5);}process(_H,_I,parameters){const _J=_H[0];const _P=_I[0];const bypass=parameters.bypass;const size=parameters.size;const damp=parameters.damp;const mix=parameters.mix;for(let c=0;c<_J.length;++c){const _K=_J[c];const _Q=_P[c];for(let _L=0;_L<_K.length;++_L){this._32(size[_L]??size[0]);this._K1(damp[_L]??damp[0]);_Q[_L]=_K[_L];let out=0;const _X=_K[_L]*_N1._Q1;for(let i=0;i<_N1._O1;++i)out+=this.__1[c][i].process(_X);for(let i=0;
i<_N1._P1;++i)out=this._02[c][i].process(out);if(bypass[_L]??bypass[0])continue;const __=(mix[_L]??mix[0]);_Q[_L]*=(1-__);_Q[_L]+=(out*__);}}return this._E;}_32(_D1){if(_D1===this._Y1)return;const size=(_D1*_N1._S1)+_N1._T1;for(let c=0;c<this.__1.length;++c)for(let i=0;i<_N1._O1;++i)this.__1[c][i]._I1(size);this._Y1=_D1;}_K1(_L1){if(_L1===this._Z1)return;const damp=_L1*_N1._R1;for(let c=0;c<this.__1.length;++c)for(let i=0;i<_N1._O1;++i)this.__1[c][i]._K1(damp);this._Z1=_L1;}}registerProcessor("reverb1-processor",
_N1);class _42 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"rate",automationRate:"a-rate",defaultValue:5.0,minValue:0.0,maxValue:20.0},{name:"intensity",automationRate:"a-rate",defaultValue:1.0,minValue:0.0,maxValue:1.0},{name:"offset",automationRate:"a-rate",defaultValue:0.0,minValue:0.0,maxValue:1.0},{name:"shape",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:4}];}constructor(_T){
super();this._D();const _U=_T.outputChannelCount[0];this._52=new Array(_U).fill(1.0);this._62=new Array(_U).fill(0.0);this._72=new Array(_U).fill(_82._92._a2);this._b2=new Array(_U);for(let c=0;c<_U;++c){this._b2[c]=new _c2();this._b2[c]._d2(sampleRate);this._b2[c]._e2(this._52[c]);this._b2[c]._f2(this._72[c]);if(c%2===1){this._b2[c]._g2(this._62[c]);}}}process(_H,_I,parameters){const _J=_H[0];const _P=_I[0];const bypass=parameters.bypass;const rate=parameters.rate;const intensity=parameters.intensity;const offset=parameters.offset;
const shape=parameters.shape;for(let c=0;c<_J.length;++c){const _K=_J[c];const _Q=_P[c];for(let _L=0;_L<_K.length;++_L){_Q[_L]=_K[_L];const _Z=rate[_L]??rate[0];const _h2=offset[_L]??offset[0];const _i2=shape[_L]??shape[0];this._j2(c,_Z,_h2,_i2);const _k2=this._b2[c]._51();if((bypass[_L]??bypass[0])>0.0){continue;}const i=intensity[_L]??intensity[0];const out=_K[_L]*_k2*i;_Q[_L]*=(1.0-i);_Q[_L]+=out;}}return this._E;}_j2(_71,_l2,_m2,_n2){if(_l2!==this._52[_71]){this._b2[_71]._e2(_l2);this._52[_71]=_l2;}if(_m2!==this._62[_71]){
if(_71%2===1){this._b2[_71]._g2(_m2);}this._62[_71]=_m2;}if(_n2!==this._72[_71]){this._b2[_71]._f2(_n2);this._72[_71]=_n2;}}}registerProcessor("tremolo-processor",_42);function _82(){}_82._92={_a2:0,_o2:1,_p2:2,_q2:3,_r2:4,_s2:5};_82._t2=function(_u2){return 1.0-_u2;};_82._v2=function(_u2){return _u2;};_82._w2=function(_u2){return 0.5*(Math.sin((_u2*2.0*Math.PI)-(Math.PI/2.0))+1.0);};_82._x2=function(_u2){if(_u2<0.5){return 0.0;}return 1.0;};_82._y2=function(_u2){if(_u2<0.5){return 2.0*_u2;}return 2.0-(2.0*_u2);
};_82._z2=[_82._t2,_82._v2,_82._w2,_82._x2,_82._y2];_A2._B2=512;_A2._C2=1.0/_A2._B2;function _A2(_D2){this.data=new Float32Array(_A2._B2);for(let i=0;i<_A2._B2;++i){this.data[i]=_D2(i*_A2._C2);}}_A2.prototype._51=function(_u2){_u2=Math.max(0.0,_u2);_u2=Math.min(_u2,1.0);const _E2=_u2*_A2._B2;const _F2=~~_E2;const _G2=_E2-_F2;let _a1=_F2;let _b1=_a1+1;if(_a1>=_A2._B2){_a1-=_A2._B2;}if(_b1>=_A2._B2){_b1-=_A2._B2;}const _c1=this.data[_a1];const _d1=this.data[_b1];return _c1+(_d1-_c1)*_G2;};_c2._H2=[];_c2._I2=false;
_c2._J2=0.0;_c2._K2=20.0;function _c2(){this._L2=48000;this.shape=_82._92._p2;this._M2=1.0;this._N2=0.0;this._C2=0.0;this._O2=0.0;if(_c2._I2==true){return;}for(let i=0;i<_82._92._s2;++i){_c2._H2[i]=new _A2(_82._z2[i]);}_c2._I2=true;}_c2._P2=function(){return(_c2._I2==true);};_c2.prototype._d2=function(_Q2){this._L2=_Q2;this._R2();};_c2.prototype._e2=function(_S2){_S2=Math.max(_c2._J2,_S2);_S2=Math.min(_S2,_c2._K2);this._M2=_S2;this._R2();};_c2.prototype._g2=function(_m2){_m2=Math.max(0.0,_m2);_m2=Math.min(_m2,
1.0);const _T2=_m2-this._O2;this._O2=_m2;this._N2+=_T2;while(this._N2>=1.0){this._N2-=1.0;}while(this._N2<0.0){this._N2+=1.0;}};_c2.prototype._f2=function(_n2){_n2=Math.max(0,_n2);_n2=Math.min(_n2,_82._92._s2-1);this.shape=_n2;};_c2.prototype._51=function(){const result=_c2._H2[this.shape]._51(this._N2);this._N2+=this._C2;while(this._N2>=1.0){this._N2-=1.0;}return result;};_c2.prototype._R2=function(){this._C2=this._M2/this._L2;};